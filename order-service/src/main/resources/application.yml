# ✅ Common configuration (applies to all profiles)
spring:
  profiles:
    active: dev # default profile is dev
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      pool-name: HikariPool
      auto-commit: true
      transaction-isolation: TRANSACTION_READ_COMMITTED

      maximum-pool-size: 5       # max concurrent connections
      minimum-idle: 2             # keep at least 2 idle connections
      connection-timeout: 30000   # ms to wait for a connection
      idle-timeout: 600000        # ms before an idle conn is removed
      max-lifetime: 1800000       # ms before a conn is retired
      leak-detection-threshold: 2000  # ms to log leaked conns

      register-mbeans: true       # expose pool metrics
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true
        batch_versioned_data: true

server:
  port: 8080

app:
  kafka:
    topics:
      order-topic: orders-topic
      partitions: 1
      replicas: 1

logging:
  level:
    org.springframework.kafka: INFO
    org.soar.orderservice: INFO
    org.apache.kafka: WARN

management:
  endpoints:
    web:
      exposure:
        include: health, info
  endpoint:
    health:
      show-details: always
  health:
    kafka:
      enabled: true
    db:
      enabled: true

---
# ✅ Dev profile (local run)
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: jdbc:postgresql://localhost:5432/orders_db
    username: order_user
    password: order_pass

  kafka:
    bootstrap-servers: localhost:29092
    #    consumer:
#      group-id: order-service-group
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      retry-backoff-ms: 1000
      properties:
        enable.idempotence: true


---
# ✅ Docker profile (used in Docker Compose)
spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:postgresql://postgres:5432/orders_db
    username: order_user
    password: order_pass

  kafka:
    bootstrap-servers: kafka:9092
#    consumer:
#      group-id: order-service-group
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      retry-backoff-ms: 1000
      properties:
        enable.idempotence: true


---
# ✅ Test profile (for unit/integration tests)
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect

  kafka:
    bootstrap-servers: localhost:29092
    #    consumer:
#      group-id: order-service-group
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      retry-backoff-ms: 1000
      properties:
        enable.idempotence: true

